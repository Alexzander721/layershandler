# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Delivery
                                 A QGIS plugin
 Обработка слоёв для сдачи
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Travin Alexzander
        email                : Alexzander721@mail.ru
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
import processing
from qgis.core import (QgsApplication,
                       QgsProject,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsField,
                       QgsFields,
                       QgsFeature,
                       QgsVectorDataProvider,
                       QgsVectorLayer,
                       QgsVectorFileWriter,
                       QgsWkbTypes,
                       QgsVectorLayerUtils,
                       QgsMapLayerType,
                       QgsMapLayer,
                       )
from .resources import *
from .library import *
from .Layer_del_dialog import DeliveryDialog
import os


def message(tip, text):
    """Вывод информационных сообщений"""
    error_msg = QMessageBox()
    error_msg.setWindowTitle(tip)
    error_msg.setText(text)
    error_msg.exec_()


def change(layer, fldname, text):
    """Заполнение полей"""
    for feature in layer.getFeatures():
        layer.dataProvider().changeAttributeValues(
            {feature.id(): {layer.dataProvider().fieldNameIndex(f"{fldname}"): text}})


def universal(layer, catalog, ilst, fld, lst):
    """Объеденение всех объектов на слое, заполнение поля категории"""
    processing.run(
        "native:dissolve",
        {'INPUT': layer,
         'FIELD': [],
         'OUTPUT': f"{catalog}/{layer.name()}.gpkg"})
    vlr = QgsVectorLayer(f"{catalog}/{layer.name()}.gpkg", f"{ilst}", "ogr")
    vlr.dataProvider().addAttributes(
        [QgsField(fld, QVariant.String, len=30)]), vlr.updateFields()
    lst.append(vlr)
    try:
        [vlr.dataProvider().changeAttributeValues(
            {feature.id(): {vlr.dataProvider().fieldNameIndex(fld): ilst}}) for feature in
            vlr.getFeatures()]
    except IndexError:
        pass
    return lst


def tr(msg):
    """Перевод"""
    return QCoreApplication.translate('Delivery', msg)


class Delivery:
    """Класс модуля обработки"""

    def __init__(self, iface):
        self.iface = iface
        self.instance = QgsProject.instance()
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Delivery_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = tr(u'&Обработка слоёв')
        self.first_start = None

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Включает плагин"""
        icon_path = ':/plugins/Layer_del/icon.png'
        self.add_action(
            icon_path,
            text=tr(u'Подготовка слоёв'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True

    def unload(self):
        """Отключает плагин"""
        for action in self.actions:
            self.iface.removePluginMenu(
                tr(u'&Обработка слоёв'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Запуск основных процессов"""
        self.dlg = DeliveryDialog()
        self.dlg.lineEdit.clear()
        self.dlg.toolButton.clicked.connect(self.dct)
        self.dlg.OK.clicked.connect(self.apply)
        self.dlg.Cancel.clicked.connect(self.cancel)
        self.choice_layer()
        self.dlg.show()

    def choice_layer(self):
        """Выбор слоя"""
        self.dlg.comboBox.clear()
        [self.dlg.comboBox.addItem(layer.name(), layer) for layer in self.instance.mapLayers().values()
         if layer.type() == 0 and layer.geometryType() == 2]

    def apply(self):
        """Запуск алгоритмов обработки, проверка на ошибки"""
        if not self.dlg.Contract.text().strip():
            message("Ошибка!", f"Поле {self.dlg.label_2.text()} не заполнено!")
        if not self.dlg.Subject.text().strip():
            message("Ошибка!", f"Поле {self.dlg.label_4.text()} не заполнено!")
        if not self.dlg.Forestry.text().strip():
            message("Ошибка!", f"Поле {self.dlg.label_5.text()} не заполнено!")
        if not self.dlg.District.text().strip():
            message("Ошибка!", f"Поле {self.dlg.label_6.text()} не заполнено!")
        else:
            if not self.dlg.lineEdit.text():
                message("Ошибка!", "Папка назначения не задана!")
            if self.dlg.lineEdit.text():
                os.mkdir(f"{self.dlg.lineEdit.text()}/готово/")
                self.borders()
                [self.saveSHP(self.dlg.lineEdit.text(), layer)
                 for layer in self.iface.mapCanvas().layers() if layer.type() == 0]
                [self.remove(self.dlg.lineEdit.text(), layer)
                 for layer in self.iface.mapCanvas().layers() if layer.type() == 0]
                self.instance.addMapLayer(
                    QgsVectorLayer(f"{self.dlg.lineEdit.text()}/готово/Границы квартальной сети.shp",
                                   "Границы квартальной сети", "ogr"))
                self.instance.addMapLayer(
                    QgsVectorLayer(f"{self.dlg.lineEdit.text()}/готово/Границы объекта работ.shp",
                                   "Границы объекта работ", "ogr"))
                self.instance.addMapLayer(
                    QgsVectorLayer(f"{self.dlg.lineEdit.text()}/готово/Границы повыделенной сети.shp",
                                   "Границы повыделенной сети", "ogr"))
                [self.field(layer) for layer in self.instance.mapLayers().values() if layer.type() == 0]
                self.KCN(self.dlg.lineEdit.text())
                self.OZU(self.dlg.lineEdit.text())
                self.poligonlines(self.dlg.lineEdit.text())
                self.infrlines(self.dlg.lineEdit.text())
                self.gidrolines(self.dlg.lineEdit.text())
                self.lines(self.dlg.lineEdit.text())
                message("Готово!", f"Результирующие слои сохранены в папке: {self.dlg.lineEdit.text()}/готово/")
                self.dlg.close()

    def borders(self):
        """Создание границ объекта и полигонов кварталов"""
        processing.run(
            "native:dissolve",
            {'INPUT': self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex()),
             'FIELD': 'KW',
             'OUTPUT': f"{self.dlg.lineEdit.text()}/готово/Границы квартальной сети.shp"})
        processing.run(
            "native:dissolve",
            {'INPUT': self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex()),
             'FIELD': [],
             'OUTPUT': f"{self.dlg.lineEdit.text()}/готово/Границы объекта работ.shp"})

    def saveSHP(self, catalog, layer):
        """
        Сохранение слоёв в ESRI Shapefile СК WGS84
        """
        if layer.name() == (self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex())).name():
            QgsVectorFileWriter.writeAsVectorFormat(self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex()),
                                                    f"{self.dlg.lineEdit.text()}/готово/Границы повыделенной сети.shp",
                                                    'windows-1251',
                                                    QgsCoordinateTransform(QgsCoordinateReferenceSystem("EPSG:4326"),
                                                                           QgsCoordinateReferenceSystem("EPSG:4326"),
                                                                           self.instance), "ESRI Shapefile")
        QgsVectorFileWriter.writeAsVectorFormat(layer, f"{catalog}/WGS84_{layer.name()}", 'windows-1251',
                                                QgsCoordinateTransform(
                                                    QgsCoordinateReferenceSystem("EPSG:4326"),
                                                    QgsCoordinateReferenceSystem("EPSG:4326"),
                                                    self.instance), "ESRI Shapefile")

    def remove(self, catalog, layer):
        """Удаление слоёв MIF открытие сохранёных SHP файлов"""
        self.instance.addMapLayer(
            QgsVectorLayer(f"{catalog}/WGS84_{layer.name()}.shp", f"{layer.name()}",
                           "ogr"))
        self.instance.removeMapLayer(layer)

    def field(self, layer):
        """Создание и заполнение полей, удаление ненужных"""
        if layer.geometryType() == 2:
            if layer.name() == 'Границы повыделенной сети':
                layer.dataProvider().deleteAttributes([layer.dataProvider().fieldNameIndex("AREA")])
                self.createFilds(layer)
            if layer.name() == 'Границы квартальной сети':
                layer.dataProvider().deleteAttributes(([layer.dataProvider().fieldNameIndex("AREA"),
                                                        layer.dataProvider().fieldNameIndex("VD"),
                                                        layer.dataProvider().fieldNameIndex("PVD")]))
                self.createFilds(layer)
            if layer.name() == 'Границы объекта работ':
                layer.dataProvider().deleteAttributes(([layer.dataProvider().fieldNameIndex("AREA"),
                                                        layer.dataProvider().fieldNameIndex("VD"),
                                                        layer.dataProvider().fieldNameIndex("KW"),
                                                        layer.dataProvider().fieldNameIndex("PVD")]))
                self.createFilds(layer)
            if layer.name() == 'КЦН' or layer.name() == 'ОЗУ' or layer.name() == 'Объекты инфраструктуры полигоны':
                layer.dataProvider().deleteAttributes(([layer.dataProvider().fieldNameIndex("AREA"),
                                                        layer.dataProvider().fieldNameIndex("VD"),
                                                        layer.dataProvider().fieldNameIndex("KW"),
                                                        layer.dataProvider().fieldNameIndex("PVD"),
                                                        layer.dataProvider().fieldNameIndex("layer"),
                                                        layer.dataProvider().fieldNameIndex("fid"),
                                                        layer.dataProvider().fieldNameIndex("path")]))
                self.createFilds(layer)
        if layer.geometryType() == 1:
            if layer.name() == 'Объекты инфраструктуры линии' or layer.name() == 'Объекты гидрологической сети':
                layer.dataProvider().deleteAttributes(([layer.dataProvider().fieldNameIndex("AREA"),
                                                        layer.dataProvider().fieldNameIndex("VD"),
                                                        layer.dataProvider().fieldNameIndex("KW"),
                                                        layer.dataProvider().fieldNameIndex("PVD"),
                                                        layer.dataProvider().fieldNameIndex("layer"),
                                                        layer.dataProvider().fieldNameIndex("path"),
                                                        layer.dataProvider().fieldNameIndex("fid"),
                                                        layer.dataProvider().fieldNameIndex("Info")]))
                self.createFilds(layer)
            if layer.name() == 'Линейные объекты':
                layer.dataProvider().deleteAttributes(([layer.dataProvider().fieldNameIndex("layer"),
                                                        layer.dataProvider().fieldNameIndex("path")]))
        layer.updateFields()

    def createFilds(self, layer):
        """Создание полей сведений об объекте"""
        layer.dataProvider().addAttributes(
            [QgsField("Субъект", QVariant.String, len=30), QgsField("Лесничеств", QVariant.String, len=30),
             QgsField("Участковое", QVariant.String, len=30), QgsField("Договор", QVariant.String, len=40)])
        layer.updateFields()
        self.textbase(layer)

    def textbase(self, layer):
        """Перебор полей сведений об объекте"""
        for fldname in ["Субъект", "Лесничеств", "Участковое", "Договор"]:
            if fldname == "Субъект":
                text = self.dlg.Subject.text()
                change(layer, fldname, text)
            if fldname == "Лесничеств":
                text = self.dlg.Forestry.text()
                change(layer, fldname, text)
            if fldname == "Участковое":
                text = self.dlg.District.text()
                change(layer, fldname, text)
            if fldname == "Договор":
                text = self.dlg.Contract.text()
                change(layer, fldname, text)
        layer.updateFields()

    def KCN(self, catalog):
        """Создание границ КЦН"""
        lst = []
        for layer in self.instance.mapLayers().values():
            if layer.type() == 0 and layer.geometryType() == 2:
                [universal(layer, catalog, kcn[i], "Кат_защ", lst) for i in kcn.keys() if
                 i in layer.name().upper()]
            processing.run("native:mergevectorlayers",
                           {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'LAYERS': lst,
                            'OUTPUT': f"{catalog}/готово/КЦН.shp"})
        self.field(QgsVectorLayer(f"{catalog}/готово/КЦН.shp", "КЦН", "ogr"))
        self.instance.addMapLayer(QgsVectorLayer(f"{catalog}/готово/КЦН.shp", "КЦН", "ogr"))

    def OZU(self, catalog):
        """Создание границ ОЗУ"""
        lst = []
        for layer in self.instance.mapLayers().values():
            if layer.type() == 0 and layer.geometryType() == 2:
                [universal(layer, catalog, ozu[i], "ОЗУ", lst) for i in ozu.keys() if i in layer.name().upper()]
            processing.run("native:mergevectorlayers",
                           {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'LAYERS': lst,
                            'OUTPUT': f"{catalog}/готово/Границы особо защитных участков.shp"})
        self.field(QgsVectorLayer(f"{catalog}/готово/Границы особо защитных участков.shp", "ОЗУ", "ogr"))
        self.instance.addMapLayer(QgsVectorLayer(f"{catalog}/готово/Границы особо защитных участков.shp", "ОЗУ", "ogr"))

    def poligonlines(self, catalog):
        """Объекты инфраструктуры полигоны"""
        lst = []
        for layer in self.instance.mapLayers().values():
            if layer.name() in ["Границы квартальной сети", "Границы объекта работ", "Границы повыделенной сети"]:
                pass
            else:
                if layer.type() == 0 and layer.geometryType() == 2:
                    [universal(layer, catalog, infr[i], "Кат_зем", lst)
                     for i in infr.keys() if i in layer.name().upper()]
            processing.run("native:mergevectorlayers",
                           {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'LAYERS': lst,
                            'OUTPUT': f"{catalog}/готово/Объекты инфраструктуры полигоны.shp"})
        self.field(QgsVectorLayer(f"{catalog}/готово/Объекты инфраструктуры полигоны.shp",
                                  "Объекты инфраструктуры полигоны", "ogr"))
        self.instance.addMapLayer(QgsVectorLayer(f"{catalog}/готово/Объекты инфраструктуры полигоны.shp",
                                                 "Объекты инфраструктуры полигоны", "ogr"))

    def infrlines(self, catalog):
        """Объекты инфраструктуры линии"""
        lst = []
        for layer in self.instance.mapLayers().values():
            if layer.type() == 0 and layer.geometryType() == 1:
                if layer.name().upper() == "КВ ПРОСЕКИ":
                    universal(layer, catalog, "Квартальные просеки", "Кат_зем", lst)
                if layer.name().upper() == "КВ ПРОСЕКИ ЕСТ" or layer.name().upper() == "КВ ПР ПО КАНАВАМ":
                    universal(layer, catalog, "Кв пр по естеств руб", "Кат_зем", lst)
                [universal(layer, catalog, infr[i], "Кат_зем", lst) for i in infr.keys() if
                 i in layer.name().upper()]
            processing.run("native:mergevectorlayers",
                           {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'LAYERS': lst,
                            'OUTPUT': f"{catalog}/готово/Объекты инфраструктуры линии.shp"})
        self.field(
            QgsVectorLayer(f"{catalog}/готово/Объекты инфраструктуры линии.shp", "Объекты инфраструктуры линии", "ogr"))
        self.instance.addMapLayer(
            QgsVectorLayer(f"{catalog}/готово/Объекты инфраструктуры линии.shp", "Объекты инфраструктуры линии", "ogr"))

    def gidrolines(self, catalog):
        """Объекты гидрологической сети"""
        lst = []
        for layer in self.instance.mapLayers().values():
            if layer.type() == 0 and layer.geometryType() == 1:
                [universal(layer, catalog, gidr[i], "Кат_зем", lst) for i in gidr.keys() if
                 i in layer.name().upper()]
            processing.run("native:mergevectorlayers",
                           {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'LAYERS': lst,
                            'OUTPUT': f"{catalog}/готово/Объекты гидрологической сети.shp"})
        self.field(
            QgsVectorLayer(f"{catalog}/готово/Объекты гидрологической сети.shp", "Объекты гидрологической сети", "ogr"))
        self.instance.addMapLayer(
            QgsVectorLayer(f"{catalog}/готово/Объекты гидрологической сети.shp", "Объекты гидрологической сети", "ogr"))

    def lines(self, catalog):
        """Объеденение линейных слоёв"""
        processing.run("native:mergevectorlayers",
                       {'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                        'LAYERS': [f"{catalog}/готово/Объекты гидрологической сети.shp",
                                   f"{catalog}/готово/Объекты инфраструктуры линии.shp"],
                        'OUTPUT': f"{catalog}/готово/Линейные объекты.shp"})
        self.field(QgsVectorLayer(f"{catalog}/готово/Линейные объекты.shp", "Линейные объекты", "ogr"))
        self.instance.addMapLayer(QgsVectorLayer(f"{catalog}/готово/Линейные объекты.shp", "Линейные объекты", "ogr"))

    def dct(self):
        """Выбор каталога сохранения"""
        self.dlg.lineEdit.setText(QFileDialog.getExistingDirectory())

    def cancel(self):
        """Закрытие окна программы"""
        self.dlg.close()
